# /etc/nginx/nginx.conf

# load_module modules/ngx_http_modsecurity_module.so;   # <- enable only if you installed it

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    # Performance / buffers (safe defaults)
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20m;
    client_header_buffer_size 8k;
    large_client_header_buffers 4 32k;

    # If you need dynamic DNS resolution for proxy_pass hostnames, uncomment:
    # resolver 127.0.0.11 ipv6=off valid=30s;

    # --- ModSecurity (optional) ---
    # modsecurity on;
    # modsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;

    # --- Upstreams (Docker service names) ---
    upstream frontend_app { server frontend:80; }
    upstream backend_api  { server backend:3000;  }

    # --- HTTPS server ---
    server {
        listen 443 ssl http2;
        server_name localhost;

        # Self-signed (dev) or CA certs (prod)
        ssl_certificate     /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # HSTS (keep for real domains; fine in dev too)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;

        # Serve favicon locally to avoid proxying it
        location = /favicon.ico {
            access_log off; log_not_found off;
            root /usr/share/nginx/html;     # put a favicon here if you have one
            try_files /favicon.ico =204;    # return 204 if not found
        }

        # ---------- AI Pong Game ----------
        location = /ai-pong.html {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;

            # forward a single, trusted client identity (prevents XFF growth)
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port  $server_port;

            proxy_redirect off;
            proxy_pass http://frontend_app;    # serve from frontend
        }

        # ---------- Analytics Dashboard ----------
        location = /dashboard.html {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;

            # forward a single, trusted client identity (prevents XFF growth)
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port  $server_port;

            proxy_redirect off;
            proxy_pass http://frontend_app;    # serve from frontend
        }

        # ---------- Avatar Files ----------
        location /avatars/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;

            # forward a single, trusted client identity (prevents XFF growth)
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port  $server_port;

            proxy_redirect off;
            proxy_pass http://backend_api;    # no trailing slash to keep /avatars prefix
        }

        # ---------- WebSocket Routes (must come before other routes) ----------
        location ~ ^/(simple-remote|ws-test|ai-game) {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port $server_port;
            
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            
            proxy_pass http://backend:3001;
        }

        # ---------- Backend API ----------
        # Keeps /api prefix in upstream path (no trailing slash on proxy_pass)
        location /api/ {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;

            # forward a single, trusted client identity (prevents XFF growth)
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port  $server_port;

            proxy_redirect off;
            proxy_pass http://backend_api;    # no trailing slash → /api stays
        }

        # ---------- Frontend ----------
        location / {
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;

            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Port  $server_port;

            proxy_redirect off;
            proxy_pass http://frontend_app;
        }
    }

    # --- HTTP → HTTPS redirect ---
    server {
        listen 80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }
}
